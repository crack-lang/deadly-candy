# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.termui Event, KeyEvent, TermApp, Window, KEY_ENTER, KEY_ESC,
    KEY_DOWN, KEY_LEFT, KEY_PGDN, KEY_RIGHT, KEY_PGUP, KEY_UP;
import crack.functor Functor2;
import crack.math max, min;

class Table;
alias EventCallback = Functor2[bool, Table, Event];
alias TableModel = Array[Array[String]];

@export_symbols EventCallback, TableModel;

## Update 'widths' to be at least large enough to accomodate 'contents' for
## columns beginning at 'start'.
## Formally, this sets widths[i] to
## max(widths[i], contents[start + i].count()).
## widths: Result array, must be of size contents.count() - start and must be
##     initialized with the existing minimum values.
## contents: Array of contents.
## start:
void updateWidths(Array[int] widths, Array[String] contents, int start) {
    for (int i = 0; i < contents.count() - start; ++i)
        widths[i] = max(widths[i], contents[start + i].count());
}

class Table : Window {

    TableModel model;

    ## Top line index.
    uint top = 0;

    ## The left-most column.
    uint left = 0;

    ## Selected line index.
    uint selection;

    HashMap[int, EventCallback] __bindings = {};

    byte
        normalAttr = 6,  # cyan
        selectionAttr = 0x47, # white on blue
        matchAttr = 0x43, # yellow on blue
        unfocusedSelectionAttr = 0x86; # Underlined, cyan

    oper init(TermApp app, TableModel model) : Window(app), model = model {
        size := app.getSize();
        width = size.x;
        height = size.y;
    }

    oper init(Window parent, TableModel model) :
        Window(parent),
        model = model {
    }

    void bind(int key, EventCallback action) {
        __bindings[key] = action;
    }

    ## Show the selection at the specified index.
    void show(uint index) {
        if (index > model.count())
            return;

        if (index < top)
            top = index;
        else if (index - top >= height)
            top = index - height + 1;
    }

    ## Return the minimum number of columns in all of the rows.
    int __minCols() {
        if (!model)
            return 0;
        result := model[0].count();
        for (row :in model)
            result = min(result, row[0].count());
        return result;
    }

    bool onEvent(Event event) {
        if (event := KeyEvent.cast(event, null)) {

            if (handler := __bindings.get(event.key))
                return handler(this, event);

            if (event.key == KEY_UP && selection > 0) {
                --selection;
                if (selection < top)
                    top = selection;
            } else if (event.key == KEY_DOWN &&
                       selection < model.count() - 1) {
                ++selection;
                if (selection - top >= height)
                    top = selection - height + 1;
            } else if (event.key == KEY_LEFT && left > 0) {
                left--;
            } else if (event.key == KEY_RIGHT && left < __minCols()) {
                left++;
            } else if (event.key == KEY_PGUP) {
                if (top < height) {
                    # Go to the top, leave the selection the same.
                    top = 0;
                } else {
                    # Go one page up, move selection one page up.
                    top = top - height;
                    if (selection >= height)
                        selection -= height;
                }
            } else if (event.key == KEY_PGDN) {
                if (top >= model.count() - height) {
                    top = model.count() - height;
                } else {
                    top += height;
                    if (selection < model.count() - height)
                        selection += height;
                }
            } else if (event.key == KEY_ESC) {
                getApp().terminate();
            }
        }
        return true;
    }

    Array[int] calcColumnWidths() {
        result := Array[int](model[top].count() - left, 0);

        # The current column index.
        int col;
        for (int y = 0; y < height; ++y) {
            if (y < model.count())
                updateWidths(result, model[top + y], left);
        }

        return result;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, x, y, 0, b' ');
        focused := getFocus();

        widths := calcColumnWidths();

        for (int y = 0; y < height; ++y) {
            if (top + y >= model.count())
                continue;
            row := model[top + y];
            x := 0;

            attr := (y + top == selection) ? selectionAttr : normalAttr;

            for (int col = left; col < row.count(); ++col) {
                gc.write(x, y, attr, row[col]);
                width := row[col].count();
                paddedWidth := widths[col - left];

                # Write the padding.
                for (int i = 0; i < paddedWidth - width; ++i)
                    gc.write(x + width + i, y, attr, ' ');

                gc.write(x + paddedWidth, y, attr, '|');
                x += paddedWidth + 1;
            }
        }
    }
}

#import crack.ascii wsplit;
#import crack.fs makePath;
#words := wsplit(makePath('/home/mmuller/doc/FixingInterfaces.txt').readAll());
#model := TableModel();
#for (int i; i < words.count() / 10; ++i)
#    model.append(words.subarray(i * 10, 10));
#
#app := TermApp();
#app.start();
#app.showCursor(false);
#table := Table(app, model);
#app.run();
#app.showCursor(true);
#app.stop();
