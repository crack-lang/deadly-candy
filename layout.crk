## Layout controls.
##
## TermUI layouts are implemented as container windows that arrange controls
## in specific ways.

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.cont.array Array;
import crack.io cerr;
import crack.lang InvalidArgumentError;
import crack.exp.termui Coord, Event, KeyEvent, TermApp, Window;

import .util convertKey, KEY_BACKTAB, KEY_TAB;

## Used as 'size' for Container.addChild().  Indicates the child should expand
## to fill as much space as possible.
const EXPAND := -1;

class _Cell {
    Window win;
    int size;
    uint pos;

    oper init(Window win, int size ) : win = win, size = size {}
}


## Recalculates the position and size of all cells in the array so that 'size'
## is respected for all of them and cells whose size is "EXPAND" are expanded
## to evenly consume the remainder of all space.
void _recalculate(Array[_Cell] cells, int max) {
    uint used, pos, expanderCount;

    # Compute fixed size values.
    for (cell :in cells) {
        if (cell.size == EXPAND)
            ++expanderCount;
        else
            used += cell.size;
    }

    # Split the remaining space up among the expanders.
    int expanderSize = 1, remainder;
    if (expanderCount) {
        if (used < max) {
            # Compute the size for each expander.
            expanderSize = (max - used) / expanderCount;
            if (expanderSize)
                # Keep track of the remainder, we'll give it to the first
                # expander.
                remainder = (max - used) % expanderCount;
            else
                # Make sure we got a size of at least 1.
                expanderSize = 1;
        }
    }

    uint nextPos;
    for (cell :in cells) {
        if (cell.size == EXPAND) {
            cell.pos = nextPos;
            nextPos += expanderSize + remainder;
            remainder = 0;
        } else {
            cell.pos = nextPos;
            nextPos += cell.size;
        }
    }
}

## Manages the positions and sizes of a set of child windows.
@abstract class Container : Window {

    Array[_Cell] _cells = {};

    int __focus;

    bool __captive;

    byte backgroundAttr = 7;  # Default background attribute.

    oper init(Window parent) : Window(parent) {}
    oper init(TermApp app) : Window(app) {}

    @abstract void _recalculate();

    ## Adds a child to the container.  'size' is the size (in characters,
    ## width or height, depending on whether this is a row or a column).  A
    ## size of EXPAND causes the control to expand to fill as much space as
    ## possible.
    void addChild(Window win, int size) {
        if (!_cells && getFocus() && win.canFocus())
            win.setFocus(true);
        _cells.append(_Cell(win, size));
        _recalculate();
    }

    void onResize(uint width, uint height) {
        Window.onResize(width, height);
        _recalculate();
    }

    bool onEvent(Event event) {
        if (event := KeyEvent.cast(event, null)) {
            k := convertKey(event);

            # Handle tab and backtab.
            if (k == KEY_TAB) {
                if (_cells) _cells[__focus].win.setFocus(false);
                oldFocus := __focus;

                while (true) {
                    ++__focus;
                    if (__focus >= _cells.count()) {
                        __focus = 0;
                        if (!__captive && getParent())
                            return getParent().onEvent(event);
                    }

                    if (_cells[__focus].win.canFocus() || __focus == oldFocus)
                        break;
                }
                _cells[__focus].win.setFocus(true);
                return true;
            } else if (k == KEY_BACKTAB) {
                if (_cells) _cells[__focus].win.setFocus(false);
                oldFocus := __focus;
                while (true) {
                    --__focus;
                    if (__focus == -1) {
                        __focus = 0;
                        if (!__captive && getParent())
                            return getParent().onEvent(event);
                    }

                    if (_cells[__focus].win.canFocus() || __focus == oldFocus)
                        break;
                }
                _cells[__focus].win.setFocus(true);
                return true;
            }
        }
        return false;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, backgroundAttr, b' ');

        for (cell :in _cells)
            cell.win.paint();
    }

    void setFocus(bool focused) {
        Window.setFocus(focused);
        if (_cells) {

            # Make sure the focused cell can accept focus.
            tmpFocus := __focus;
            while (!_cells[__focus].win.canFocus()) {
                __focus += 1;
                if (__focus == tmpFocus)
                    throw InvalidArgumentError('Window can not accept focus');
            }

            _cells[__focus].win.setFocus(focused);
        }
    }

    bool canFocus() {
        for (cell :in _cells) {
            if (cell.win.canFocus())
                return true;
        }

        return false;
    }

    ## Sets/clears "captive" mode.  When the tab key is pressed in a captive
    ## container and the last child has the focus, focus is shifted to the
    ## first child.  In a non-captive container, onEvent() returns false,
    ## effectively delegating handling of the tab to the parent window.  This
    ## allows container windows to be nested.  The outermost container should
    ## be set to captive.
    void setCaptive(bool captive) {
        __captive = captive;
    }

    ## Changes the size of a given cell, referenced by index.  'size' is
    ## either width or height, depending on whether this is a row or a column.
    ## The size change will not take effect until the next resize.
    void setCellSize(uint index, uint size) {
        _cells[index].size = size;
    }
}

## Arranges its children in a column.
class Column : Container {

    oper init(Window parent) : Container(parent) {}
    oper init(TermApp app) : Container(app) {}

    void _recalculate() {
        _recalculate(_cells, height);

        # Reposition all of the windows.
        numCells := _cells.count();
        for (int i = 0; i < numCells; ++i) {
            cell := _cells[i];
            cell.win.x = 0;
            cell.win.y = cell.pos;
            cell.win.onResize(
                width,
                ((i < numCells - 1) ? _cells[i + 1].pos : height) - cell.pos
            );
        }
    }
}

## Arranges its children in a row.
class Row : Container {
    oper init(Window parent) : Container(parent) {}
    oper init(TermApp app) : Container(app) {}

    void _recalculate() {
        _recalculate(_cells, width);

        # Reposition all of the windows.
        numCells := _cells.count();
        for (int i = 0; i < numCells; ++i) {
            cell := _cells[i];
            cell.win.x = cell.pos;
            cell.win.y = 0;
            cell.win.onResize(
                ((i < numCells - 1) ? _cells[i + 1].pos : width) - cell.pos,
                height
            );
        }
    }
}

## A window that just holds another window.  This provides a means for easily
## alternating between a set of views occupying the same region of the screen.
##
## Using it is very simple: create any number of child windows and set the
## "parcel" field to the one that you want to be visible.
import crack.io Formatter;
class Frame : Window {

    ## The window that is currently visible.  May be null, in which case the
    ## contents of the frame is just black.
    Window __parcel;

    oper init(Window parent) : Window(parent) {}
    oper init(TermApp app) : Window(app) {}

    Window oper .parcel=(Window parcel) {
        __parcel = parcel;
        parcel.onResize(width, height);
        return parcel;
    }

    Window oper .parcel() { return __parcel }

    void onResize(uint width, uint height) {
        Window.onResize(width, height);
        if (__parcel)
            __parcel.onResize(width, height);
    }

    void onMove(uint x, uint y) {
        Window.onMove(x, y);
        if (__parcel)
            __parcel.onResize(width, height);
    }

    bool onEvent(Event event) {
        if (__parcel)
            return __parcel.onEvent(event);
        return false;
    }

    Coord getMinSize() {
        if (__parcel)
            return __parcel.getMinSize();
        else
            return Coord(0, 0);
    }

    void setFocus(bool focus) {
        if (__parcel)
            __parcel.setFocus(focus);
        else
            Window.setFocus(focus);
    }

    bool canFocus() {
        if (__parcel)
            return __parcel.canFocus();
        else
            return false;
    }

    void paint() {
        if (__parcel)
            __parcel.paint();
        else
            getGraphicsContext().clear(0);
    }

    void formatTo(Formatter out) {
        out `Frame($__parcel)`;
    }
}
