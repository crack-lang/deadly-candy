## Layout controls.
##
## TermUI layouts are implemented as container windows that arrange controls
## in specific ways.

import crack.cont.array Array;
import crack.io cerr;
import crack.exp.termui Event, KeyEvent, TermApp;
import termui_fix Window;

const KEY_TAB := 9;

## Used as 'size' for Container.addChild().  Indicates the child should expand
## to fill as much space as possible.
const EXPAND := -1;

## Container arranges its children in a column.
class Container : Window {
    class __Cell {
        Window win;
        int size;
        uint pos;

        oper init(Window win, int size ) : win = win, size = size {}
    }

    Array[__Cell] __cells = {};

    int __focus;

    byte backgroundAttr = 7;  # Default background attribute.

    oper init(Window parent) : Window(parent) {}
    oper init(TermApp app) : Window(app) {}

    void __recalculate() {
        uint used, pos, expanderCount;

        # Compute fixed size values.
        for (cell :in __cells) {
            if (cell.size == EXPAND)
                ++expanderCount;
            else
                used += cell.size;
        }

        # Split the remaining space up among the expanders.
        int expanderSize = 1, remainder;
        if (expanderCount) {
            if (used < height) {
                # Compute the size for each expander.
                expanderSize = (height - used) / expanderCount;
                if (expanderSize)
                    # Keep track of the remainder, we'll give it to the first
                    # expander.
                    remainder = (height - used) % expanderCount;
                else
                    # Make sure we got a size of at least 1.
                    expanderSize = 1;
            }
        }

        uint nextPos;
        for (cell :in __cells) {
            if (cell.size == EXPAND) {
                cell.pos = nextPos;
                nextPos += expanderSize + remainder;
                remainder = 0;
            } else {
                cell.pos = nextPos;
                nextPos += cell.size;
            }
        }

        # Reposition all of the windows.
        numCells := __cells.count();
        for (int i = 0; i < numCells; ++i) {
            cell := __cells[i];
            cell.win.x = 0;
            cell.win.y = cell.pos;
            cell.win.width = width;
            cell.win.height =
                ((i < numCells - 1) ? __cells[i + 1].pos : height) - cell.pos;
        }
    }

    ## Adds a child to the container.  'size' is the size (in characters,
    ## width or height, depending on whether this is a row or a column).  A
    ## size of EXPAND causes the control to expand to fill as much space as
    ## possible.
    void addChild(Window win, int size) {
        if (!__cells && getFocus())
            win.setFocus(true);
        __cells.append(__Cell(win, size));
        __recalculate();
    }

    void onResize(uint width, uint height) {
        Window.onResize(width, height);
        __recalculate();
    }

    bool onEvent(Event event) {
        if (event := KeyEvent.cast(event, null)) {

            # Handle a tab.
            if (event.key == KEY_TAB) {
                if (__cells) __cells[__focus].win.setFocus(false);
                ++__focus;
                if (__focus >= __cells.count())
                    __focus = 0;
                __cells[__focus].win.setFocus(true);
                return true;
            }

            # Hand it off to the focused child.
            return __cells[__focus].win.onEvent(event);
        }
        return false;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, width, height, backgroundAttr, b' ');

        for (cell :in __cells)
            cell.win.paint();
    }

    void setFocus(bool focused) {
        Window.setFocus(focused);
        if (__cells)
            __cells[__focus].win.setFocus(focused);
    }
}