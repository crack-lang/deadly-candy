## grex - Searchable listbox that displays the output of grep and lets you
## edit files listed from the output.

import crack.ascii rstrip;
import crack.cont.array Array;
import crack.exp.termui Event, TermApp;
import crack.functor Function1, Function2;
import crack.io cout, cerr;
import crack.lang AppendBuffer, Buffer;
import crack.strutil StringArray;
import crack.process Process, ProcessHandlerImpl, CRK_PIPE_STDERR,
    CRK_PIPE_STDOUT;
import crack.sys argv;

import entry Entry;
import layout Column, EXPAND;
import termlist List;

class CmdProcHandler : ProcessHandlerImpl {

    Array[String] listModel;

    oper init(Array[String] listModel) : listModel = listModel {}

    void onErrLine(Buffer line) {
        listModel.append(rstrip(String(line)));
    }

    void onOutLine(Buffer line) {
        listModel.append(rstrip(String(line)));
    }
}

class Cmd : StringArray {
    oper init(int size) : StringArray(size) {}

    void run(Array[String] list) {
        proc := Process(this, CRK_PIPE_STDOUT | CRK_PIPE_STDERR);
        proc.run(CmdProcHandler(list));
    }
}

# Start the UI.
app := TermApp();
app.start();

grid := Column(app);

Array[String] lines = {};
list := List(grid, lines);
grid.addChild(list, EXPAND);

entryBuf := AppendBuffer(256);
entry := Entry(grid, entryBuf);
grid.addChild(entry, 1);

## The list index where we start searching.  This gets rehomed every time we
## do "startSearch".
int searchStart;

app.showCursor(false);

bool terminate(List list, Event event) {
    app.terminate();
    return true;
}

String result;
bool select(List list, Event event) {
    result = lines[list.selection];
    colon := result.lfind(b':');
    Cmd!['yed', result.substr(0, colon)].run(lines);
    return true;
}

bool startSearch(List list, Event event) {
    list.setFocus(false);
    entry.setFocus(true);
    searchStart = list.selection;
    return true;
}

Function2[bool, List, Event] leh(function[bool, List, Event] func) {
    return Function2[bool, List, Event](func);
}

list.bind(b'\r', leh(select));

# Ctrl-F brings up search.
list.bind(6, leh(startSearch));

# Entry bindings.

bool endSearch(Entry entry, Event event) {
    list.setFocus(true);
    entry.setFocus(false);
    entryBuf.size = 0;
    return true;
}

bool cancelSearch(Entry entry, Event event) {
    list.setFocus(true);
    list.selection = searchStart;
    entry.setFocus(false);
    entryBuf.size = 0;
    return true;
}

void selectNextMatch(Buffer pattern, int start) {
    # Iterate from the current selection with wrapping.
    count := lines.count();
    i := (start + 1) % count;

    while (i != start) {
        if (lines[i].lfind(pattern) != -1) {
            list.selection = i;
            return;
        }

        i = (i + 1) % count;
    }
}

void selectPrevMatch(Buffer pattern, int start) {
    count := lines.count();
    i := (start + count - 1) % count;
    while (i != start) {
        if (lines[i].lfind(pattern) != -1) {
            list.selection = i;
            return;
        }

        i = (i + count - 1) % count;
    }
}

void entryChanged(AppendBuffer model) {
    selectNextMatch(model, searchStart);
}

bool searchNext(Entry entry, Event event) {
    selectNextMatch(entryBuf, list.selection);
    return true;
}

bool searchPrev(Entry entry, Event event) {
    selectPrevMatch(entryBuf, list.selection);
    return true;
}

## Shorthand to create an entry event handler.
Function2[bool, Entry, Event] eeh(function[bool, Entry, Event] func) {
    return Function2[bool, Entry, Event](func);
}

# Esc - cancel search
entry.bind(033, eeh(cancelSearch));

# Ctrl-F - search next.
entry.bind(6, eeh(searchNext));

# Ctrl-G - search prev.
entry.bind(7, eeh(searchPrev));

# Enter - end search, leave selection.
entry.bind(13, eeh(endSearch));

entry.changeCallback = Function1[void, AppendBuffer](entryChanged);

list.setFocus(true);

# Invoke the command.
grepArgs := argv.subarray(1);
cmd := Cmd!['grep'];
cmd.extend(grepArgs);
cmd.run(lines);

app.run();
app.showCursor(true);
app.stop();
