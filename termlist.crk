
import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.termui Event, KeyEvent, TermApp, Window, KEY_ENTER, KEY_ESC,
    KEY_DOWN, KEY_PGDN, KEY_PGUP, KEY_UP;
import crack.functor Functor2;

class List;
alias EventCallback = Functor2[bool, List, Event];

@export_symbols EventCallback;

class List : Window {

    Array[String] model;

    ## Top line index.
    uint top = 0;

    ## Selected line index.
    uint selection;

    HashMap[int, EventCallback] __bindings = {};

    byte
        normalAttr = 6,  # cyan
        selectionAttr = 0x47, # white on blue
        matchAttr = 0x43, # yellow on blue
        unfocusedSelectionAttr = 0x86; # Underlined, cyan

    oper init(TermApp app, Array[String] model) : Window(app), model = model {
        size := app.getSize();
        width = size.x;
        height = size.y;
    }

    oper init(Window parent, Array[String] model) :
        Window(parent),
        model = model {
    }

    void bind(int key, EventCallback action) {
        __bindings[key] = action;
    }

    bool onEvent(Event event) {
        if (event := KeyEvent.cast(event, null)) {

            if (handler := __bindings.get(event.key))
                return handler(this, event);

            if (event.key == KEY_UP && selection > 0) {
                --selection;
                if (selection < top)
                    top = selection;
            } else if (event.key == KEY_DOWN &&
                       selection < model.count() - 1) {
                ++selection;
                if (selection - top >= height)
                    top = selection - height + 1;
            } else if (event.key == KEY_PGUP) {
                if (top < height) {
                    # Go to the top, leave the selection the same.
                    top = 0;
                } else {
                    # Go one page up, move selection one page up.
                    top = top - height;
                    if (selection >= height)
                        selection -= height;
                }
            } else if (event.key == KEY_PGDN) {
                if (top >= model.count() - height) {
                    top = model.count() - height;
                } else {
                    top += height;
                    if (selection < model.count() - height)
                        selection += height;
                }
            } else if (event.key == KEY_ESC) {
                getApp().terminate();
            }
        }
        return true;
    }

    void paint() {
        gc := getGraphicsContext();
        gc.fillRect(0, 0, x, y, 0, b' ');
        cur := model.iter();
        cur.index = top;
        focused := getFocus();
        for (int y = 0; cur && y - top < height; ++y) {
            selected := y + top == selection;
            if (focused && y + top == selection)
                gc.write(0, y, selectionAttr, cur.elem());
            else if (selected)
                gc.write(0, y, unfocusedSelectionAttr, cur.elem());
            else
                gc.write(0, y, normalAttr, cur.elem());
            cur.next();
        }
    }
}

